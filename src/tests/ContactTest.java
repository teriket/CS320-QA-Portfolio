package tests;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import contacts.Contact;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.DisplayName;

class ContactTest {

	
	@Nested
	@DisplayName("Contact ID Tests:")
	class ContactIDTests{
		
		@Test
		void GetContactID() {
			String validId = "a12Xce";
			Contact contact = new Contact(validId, "John", "Smith", "1112223333", "Address");
			assert(contact.GetContactID().equals(validId));
		}
		
		@Test
		void EmptyContactID() {
			Exception e = assertThrows(IllegalArgumentException.class, () -> {
				new Contact("", "Peggy", "Sue", "1234567890", "peggySue@Email.com");
			});
			
			assertEquals("Invalid ID", e.getMessage());
		}
		
		@Test
		void NullContactID() {
			Exception e = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(null, "peggy", "sue", "1234567890", "peggysueemail");
			});
			
			assertEquals("Invalid ID", e.getMessage());
		}
		
		@Test
		void DuplicateContactID() {
			Exception e = assertThrows(IllegalArgumentException.class, () -> {
				new Contact("12", "Peggy", "Sue", "1234567890", "peggysuemail");
				new Contact("12", "Peggy", "Sue", "1234567890", "peggysuemail");
			});
			
			assertEquals("Invalid ID", e.getMessage());
		}
		
		@Test
		void InvalidLongContactID() {
			Exception e = assertThrows(IllegalArgumentException.class, () -> {
				new Contact("this11Chars", "Peggy", "sue", "1234567890", "PeggyThePegMaster@gmail.com");
			});
			
			assertEquals("Invalid ID", e.getMessage());
		}
		
		//I don't know how to write a test that validates the "uniqueness of random numbers clause" in my code
		@Test
		void AutoGeneratedIDIsValid() {
			Contact contact = new Contact(Contact.GenerateUniqueID(), "Peggy", "Sue", "0123456789", "peggy@email.com");
			assertAll(
					() -> assertTrue(contact.GetContactID().length() > 0),
					() -> assertTrue(contact.GetContactID().length() <= 10),
					() -> assertNotNull(contact.GetContactID()));
		}
		
		@Test
		void ValidShortID() {
			Exception exception = null;
			try {
				new Contact("1", "Jenna", "Marbles", "7777777777", "Her Address");
				new Contact("A", "silly", "Billy", "4444444444", "address");
				new Contact("\n", "Udemy", "Class", "1234567890", "unreal");
			}
			catch(Exception e){
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		@Test
		void ValidLongID() {
			Exception exception = null;
			try {
				new Contact("This10Char", "Jenna", "Marbles", "1234567890", "Address");
				new Contact("\t ab \n\\", "Honest", "Abe", "1234567890", "hello world");
			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
	}
	
	@Nested
	class FirstNameTests{
		@Test
		void SetFirstName() {
			Contact contact = new Contact(Contact.GenerateUniqueID(), "Jane", "Doe", "1234567890", "JaneDoegmail.com");
			contact.SetFirstName("Sally");
			assert(contact.GetFirstName().equals("Sally"));
		}
		
		@Test
		void ValidShortFirstName() {
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "a", "smith", "1234567890", "emailaddress");
				new Contact(Contact.GenerateUniqueID(), "1", "smith", "1234567890", "emailaddress");
				new Contact(Contact.GenerateUniqueID(), ".", "smith", "1234567890", "emailaddress");
				new Contact(Contact.GenerateUniqueID(), "\t", "smith", "1234567890", "emailaddress");

			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		@Test
		void ValidLongFirstName() {
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "thisIs10:)", "smith", "1234567890", "emailaddress");
				new Contact(Contact.GenerateUniqueID(), "abcdefghij", "smith", "1234567890", "emailaddress");
				new Contact(Contact.GenerateUniqueID(), "0123456789", "smith", "1234567890", "emailaddress");
			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		
		@Test
		void InvalidShortFirstName() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "", "lastName", "0123456789", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void NullFirstName() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), null, "lastName", "0123456789", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void InvalidLongFirstName() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "This11Chars", "lastName", "0123456789", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
	}
	
	@Nested
	class LastNameTests{
		@Test
		void SetLastName() {
			Contact contact = new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "1234567890", "Address");
			contact.SetLastName("Eustice");
			assert(contact.GetLastName().equals("Eustice"));
		}
		
		@Test
		void NullLastName() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", null, "0123456789", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void InvalidShortLastName() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "", "0123456789", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void InvalidLongLastName() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "TooLongname", "0123456789", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void ValidShortLastName() {
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "firstName", "a", "0123456789", "street Address");
				new Contact(Contact.GenerateUniqueID(), "firstName", "4", "0123456789", "street Address");
				new Contact(Contact.GenerateUniqueID(), "firstName", "\n", "0123456789", "street Address");

			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		
		@Test
		void ValidLongLastName() {
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "firstName", "ThisIsGood", "0123456789", "street Address");
			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
	}
	
	
	@Nested
	class PhoneNumberTests{
		@Test
		void ValidPhoneNumber(){
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "0123456789", "street Address");

			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		@Test
		void NullPhoneNumber() { 
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", null, "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void InvalidShortPhoneNumber() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "012345678", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());

		}
		
		@Test 
		void InvalidLongPhoneNumber(){
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "01234567898", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void PhoneNumberContainsNonNumericCharacters() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "786-584-12", "Address");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void SetPhoneNumber() {
			Contact contact = new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "9119119113", "Address");
			contact.SetPhoneNumber("9706242100");
			assert(contact.GetPhoneNumber().equals("9706242100"));
		}
		
	}
	
	@Nested
	class AddressTests{
		@Test
		void ValidShortAddress() {
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "0123456789", "0");

			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		@Test
		void ValidLongAddress() {
			Exception exception = null;
			try {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "0123456789", "This string has 30 characters.");
				
			}
			catch(Exception e) {
				exception = e;
			}
			finally {
				assertNull(exception);
			}
		}
		
		@Test
		void NullAddress() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "0123456789", null);
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void InvalidShortAddress() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "0123456789", "");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void InvalidLongAddress() {
			Exception exception = assertThrows(IllegalArgumentException.class, () -> {
				new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "0123456789", "Oh no!  I've exceeded the limit");
			});
			
			assertEquals(IllegalArgumentException.class, exception.getClass());
		}
		
		@Test
		void SetAddress() {
			Contact contact = new Contact(Contact.GenerateUniqueID(), "firstName", "lastName", "9119119113", "Address");
			contact.SetPhoneNumber("9706242100");
			assert(contact.GetPhoneNumber().equals("9706242100"));
		}
	}
	
}

